import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Put your name here
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Prints basic html heading
        out.println("<!DOCTYPE html>");
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");

        // For the first child of the parent
        final int zero = 0;
        // For nodes with only one or fewer children
        final int foreverAnOnlyChild = 1;

        // Getting title for HTML document
        final String titleTag = "title";
        int titleElement = getChildElement(channel, titleTag);
        XMLTree title = channel.child(titleElement);
        int titleChildren = title.numberOfChildren();
        String titleText = "Empty Title";
        if (titleChildren == foreverAnOnlyChild) {
            titleText = title.child(zero).label();
            out.println(titleText);
        }
        out.println("</title>");
        out.println("</head>");

        // Move onto HTML body
        out.println("<body>");
        out.println("<h1>");

        // Starting <a> hyperlink tag
        out.print("<a href=\"");

        // Getting link element from channel and printing into HTML file
        final String linkTag = "link";
        int linkElement = getChildElement(channel, linkTag);
        XMLTree link = channel.child(linkElement);
        out.println(link.child(zero).label() + "\">" + titleText + "</a>");
        out.println("</h1>");

        // Getting channel description and printing into HTML file
        out.println("<p>");
        final String descriptionTag = "description";
        int descriptionElement = getChildElement(channel, descriptionTag);
        XMLTree description = channel.child(descriptionElement);
        int descriptionChildren = description.numberOfChildren();
        String descriptionText = "No description";
        if (descriptionChildren == foreverAnOnlyChild) {
            descriptionText = description.child(zero).label();
        }
        out.println(descriptionText);
        out.println("</p>");

        // Printing table header to HTML file
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

        // Getting item elements and printing to HTML file
        final int start = 0;
        final String itemTag = "item";
        XMLTree item = null;
        // COMMENT: Update numberOfChildren to a useful variable name
        for (int index = start; index < channel.numberOfChildren(); index++) {
            if (channel.child(index).label().equals(itemTag)) {
                item = channel.child(index);
                processItem(item, out);
            }
        }
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        // Prints closing tags on separate lines into the html document
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        final int numChild = xml.numberOfChildren();
        final int start = 0;
        int foundTag = -1;

        for (int index = start; index < numChild; index++) {
            if (xml.child(index).isTag()
                    && xml.child(index).label().equals(tag)) {
                foundTag = index;
            }
        }
        return foundTag;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Looping indexes and equality checks to see if a node has a child
        int itemChildren = item.numberOfChildren();
        final int hasChild = 1;
        final int start = 0;
        final int zero = 0;

        // Children we need to search for
        final String description = "description";
        final String title = "title";
        final String link = "link";
        final String pubDate = "pubDate";
        final String source = "source";

        // Getting indexes of all available elements and whether they exist
        boolean hasSource = false;
        boolean hasTitle = false;
        boolean hasLink = false;
        boolean hasPubDate = false;

        // Indexes of each child from parent item node
        // Set to a false "-1" value until we loop to find values
        int sourceIdx = -1;
        int titleIdx = -1;
        int linkIdx = -1;
        int pubDateIdx = -1;
        int descriptionIdx = -1;
        for (int index = start; index < itemChildren; index++) {
            if (item.child(index).label().equals(source)) {
                hasSource = true;
                sourceIdx = index;
            }
            if (item.child(index).label().equals(title)) {
                hasTitle = true;
                titleIdx = index;
            }
            if (item.child(index).label().equals(description)) {
                descriptionIdx = index;
            }
            if (item.child(index).label().equals(link)) {
                hasLink = true;
                linkIdx = index;
            }
            if (item.child(index).label().equals(pubDate)) {
                hasPubDate = true;
                pubDateIdx = index;
            }
        }
        out.println("<tr>");
        if (hasPubDate) {
            out.println("<td>");
            out.println(item.child(pubDateIdx).child(zero).label());
            out.println("</td>");
        } else {
            out.println("<td>");
            out.println("No date available");
            out.println("</td>");
        }

        if (hasSource) {
            out.println("<td>");
            out.println("<a href=\"");
            out.print(item.child(sourceIdx).attributeValue("url"));
            out.println(
                    "\">" + item.child(sourceIdx).child(zero).label() + "</a>");
            out.println("</td>");
        } else {
            out.println("<td>");
            out.println("No source available");
            out.println("</td>");
        }

        // Checks if the title or description have children
        boolean hasTitleChild = (item.child(titleIdx)
                .numberOfChildren() == hasChild);
        boolean hasDescriptionChild = (item.child(descriptionIdx)
                .numberOfChildren() == hasChild);

        if (hasTitleChild) {
            // print title to HTML file in News column
            out.println("<td>");
            out.print("<a");
            if (hasLink) {
                out.print(" href=\"" + item.child(linkIdx).child(zero).label()
                        + "\"");
            }
            out.println(">");
            out.println(item.child(titleIdx).child(zero).label() + "</a>");
            out.println("</td>");

        } else if (hasDescriptionChild) {
            // print description if no title exists in News column
            out.println("<td>");
            out.print("<a");
            if (hasLink) {
                out.print(" href=\"" + item.child(linkIdx).child(zero).label()
                        + "\"");
            }
            out.println(">");
            out.println(
                    item.child(descriptionIdx).child(zero).label() + "</a>");
            out.println("</td>");
        } else {
            out.println("<td>");
            if (hasLink) {
                out.print(" href=\"" + item.child(linkIdx).child(zero).label()
                        + "\"");
            }
            out.print(">");
            out.println("No title available</a>");
            out.println("</td>");
        }
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        // HTML file output stream
        SimpleWriter html;

        // XML file
        XMLTree xml;

        // Initializes HTML file output stream and XML file
        xml = new XMLTree1(url);
        html = new SimpleWriter1L(file);

        // Channel child if rss is the root node
        final int firstChild = 0;

        // Checking if the document is RSS validated
        boolean isRSS = xml.label().equals("rss");
        boolean isVersion = xml.hasAttribute("version");
        String versionValue = xml.attributeValue("version");
        boolean isCorrectValue = versionValue.equals("2.0");
        if (isRSS && isVersion && isCorrectValue) {
            out.println("DOCUMENT IS RSS VALIDATED.");
            outputHeader(xml.child(firstChild), html);
            outputFooter(html);
        } else {
            out.println("ERROR! DOCUMENT IS NOT RSS VALIDATED");
        }

        // Be wary of closing SimpleWriter
    }

    private static void outputMainHeader(SimpleWriter index, XMLTree mainFeed) {
        final String titleAttribute = "title";
        String title = mainFeed.attributeValue(titleAttribute);

        // Print index page's header to html file
        index.println("<!DOCTYPE html>");
        index.println("<html>");
        index.println("<head>");
        index.println("<title>");
        index.println(title);
        index.println("</title>");
        index.println("</head>");
        index.println("<body>");
        index.println("<h1>");
        index.println(title);
        index.println("</h1>");
        index.println("<ul>");
    }

    private static void outputMainFooter(SimpleWriter index, XMLTree mainFeed,
            SimpleWriter out) {

        // Indexes and variables for accessing mainFeed's children in a for loop
        final int start = 0;
        final int numChild = mainFeed.numberOfChildren();

        // XML attributes to check
        final String xmlURL = "url";
        final String htmlFile = "file";
        final String linkName = "name";
        String url;
        String file;
        String name;

        // Loops to build each html page along with a link to each page in the
        // index page
        for (int child = start; child < numChild; child++) {
            url = mainFeed.child(child).attributeValue(xmlURL);
            file = mainFeed.child(child).attributeValue(htmlFile);
            name = mainFeed.child(child).attributeValue(linkName);
            index.println("<li>");
            index.println("<a href=\"" + file + "\">" + name + "</a>");
            index.println("</li>");
            processFeed(url, file, out);
        }
        // Close ending tags
        index.println("</ul>");
        index.println("</body>");
        index.println("</html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();

        // Console output stream
        SimpleWriter out = new SimpleWriter1L();

        // Get user input for files
        out.print(
                "Enter an rss-xml document to be read rss feeds (include \".xml\" "
                        + "extension): ");
        String xmlInput = in.nextLine();
        XMLTree mainFeed = new XMLTree1(xmlInput);

        // Outputs index page title
        final String indexPage = "index.html";
        SimpleWriter index = new SimpleWriter1L(indexPage);
        outputMainHeader(index, mainFeed);
        outputMainFooter(index, mainFeed, out);

        in.close();
        out.close();
        index.close();
    }
}